= ECMAScript =

== ECMAScript 基础 ==
- 变量，函数名，运算符以及其他一切东西都是区分大小写的。
- 变量是弱类型的
- 每行结尾的分号可有可无，但是推荐总是使用分号。
- 注释与C语言相同，`//`和`/*   */`。
- 大括号表示代码块。

变量的类型真的很弱。
- 除了字母和下划线，美元符号也可以是变量名的一员。
- ECMAScript的解释程序遇到未声明的标志符时，用该变量名创建一个全局变量，并将其初始化为指定的值。
- 在ECMAScript中，变量可以存在两种类型的值，即原始值和引用值。
    - 原始值，就是正常的值。
    - 引用值，就是指针。
- ECMAScript有5种原始类型：undefined，null，boolean，number，string。
    - ECMAScript提供了typeof运算符来判断一个值是否在某种类型的范围内。可以用这种运算符判断一个值是否表示一种原始类型；如果它是原始类型，还可以判断它表示哪种原始类型。
    - undefined类型只有一个值，就是undefined。当声明的变量未初始化时，该变量的默认值是undefined。
    - 当函数无明确返回值时，返回的也是值“undefined”。
    - null类型也只有一个值，就是null。如果函数返回的是对象，那么找不到该对象时，返回的通常是null。
    - boolean类型有两个值，true和false。
    - string类型的值，使用双引号和单引号没有区别。
ECMAScript的boolen值，数字和字符串的原始值的有趣之处在于它们是伪对象，这意味着它们实际上具有属性和方法。
- ECMAScript定义所有对象都有toString()方法。
引用类型通常叫做类（class），也就是说遇到引用值，所处理的就是对象。
- ECMAScript预定义了大量的引用类型。
    - object对象
    - boolean对象
    - number对象
    - string对象
    - instanceof运算符用来识别引用类型。（因为typeof只能告诉你是object）

== ECMAScript 一元运算符 ==
- delete
